.. _mvmutilities:

=======================================
Utilities for Manipulating MVM Products
=======================================
.. toctree::
   :maxdepth: 2

The ``hapcut_utils.py`` module contains utilities which are intended to be used with
Multi-visit Mosaic (MVM) data and to be imported into other Python programs or
a Python session for interactive data analysis.  The utilities are wrappers
around lower-level functionality which actually perform the core tasks.
The ``hapcut_utils.py`` role is to customize the use of these core
tasks specifically for working with MVM products which can be large and unwieldy.
At this time there are four utilities which are designed to be used in
sequence as is evident from their function signatures, return values, and output
products:
``mvm_id_filenames``, ``mvm_retrieve_files``, ``make_the_cut``, and ``mvm_combine``.

MVM Cutout Utilities
--------------------

mvm_id_filenames
^^^^^^^^^^^^^^^^
This utility is invoked by providing sky coordinates and
a cutout box size.  The sky coordinates represent the central location
about which the search for data of interest is to be done.  The cutout
box size represents the search box *extent* encompassing the sky coordinates.
The utility retrieves from MAST a table containing MVM filenames for ACS and 
WFC3 detectors, as well as other relevant image specific information, one 
row per filename.
Both MVM exposure-level and filter-level product filenames are constituents of
the list.  While the utility returns an astropy table object, an ascii
ECSV file is also written to disk with the output filename being constructed
from the query coordinates and box size parameters.  The output filename is of
the form::

  mvm_query_ra<##>.<####>_dec<n|s><##>.<####>_r<####>_cutout.ecsv

The `ra<##>d<####>` and `dec<n|s><##>d<####>` are the right ascension and
declination, respectively, in decimal degrees with `<n|s>` representing north or
south of the celestial equator. The `r` represents radius and is the computed diagonal
of the cutout box which is basically the square root of the sum of the box sides
squared divided by two.  The in-memory table or the ascii file can be refined
by the user to suit specific needs.  The MVM filenames within the query file are
self-descriptive.  The exposure-level drizzled filename is of the form::

  hst_skycell-p<PPPP>x<XX>y<YY>_<instr>_<detector>_<filter>_<label>-ipppssoo_dr[cz].fits

and the filter-level drizzled filename is of the form::

  hst_skycell-p<PPPP>x<XX>y<YY>_<instr>_<detector>_<filter>_<label>_dr[cz].fits

where `-p` is followed by the four digit projection cell value, and `x` and `y`
are each followed by a two digit sky cell value.  The possible `label` values
at this time are `all` or `coarse-all` where `all` indicates all exposures while
`coarse-all` indicates all the exposures at a coarse platescale
(i.e., WFC3/IR platescale) in the visit were used in the generation of the
product.  Some examples of real filenames are::

  hst_skycell-p0081x14y14_wfc3_ir_f110w_coarse-all-iby03fg4_drz.fits
  hst_skycell-p0081x14y14_wfc3_uvis_f225w_all_drc.fits

mvm_retrieve_files
^^^^^^^^^^^^^^^^^^
This utility is designed to use the in-memory table generated by ``mvm_id_filenames``
and retrieve any file listed in the table from MAST.  Since the images can be quite
large, the `clobber` parameter is set to False by default, indicating
no download is done for a filename that already exists on disk.  The utility returns
a Python list of filenames on disk available for further analysis.

make_the_cut
^^^^^^^^^^^^
The ``make_the_cut`` utility will perform the FITS cutouts on the input MVM
filter- and exposure-level images.  This MVM customized utility is layered
on ``fits_cut``, a function which is part of Astrocut, a Python package for
making astronomical cutouts (https://astrocut.readthedocs.io/en/latest/). The
``make_the_cut`` is invoked
by providing the list of files on disk for which one wants to make cutouts, as
well as the sky coordinates, and the cutout box size.  Ideally, the
sky coordinates and cutout box size are the same values used for the
``mvm_id_filenames`` utility.  For each input file designated for a cutout,
there will be a corresponding output file.  Since both the SCI and WHT
extensions of the input files are actually cut, individual output cutout FITS
files will contain two image extensions, a SCI followed by a WHT.
Each exposure-level filename will be of the form::

   hst_cutout_skycell-p<pppp>-ra<##>d<####>-dec<n|s><##>d<####>_instrument_detector_filter[_platescale]-ipppssoo.fits

Each filter-level output filename will be of the form::

   hst_cutout_skycell-p<pppp>-ra<##>d<####>-dec<n|s><##>d<####>_instrument_detector_filter[_platescale].fits

The components of the output filename follow the pattern discussed for
``mvm_id_filenames``. The additional `platescale` component has
the possible value of `coarse`.  When there is no `platescale` component present
in the filename, the `platescale` has the implicit default value of `fine`.
The platescale of `coarse` is only applicable to the WFC3/IR data.

The primary header data unit (PHDU) from the input file is retained 
as the PHDU for the output cutout file with an updated FILENAME keyword
and a few additional keywords.  The new keywords
RA_OBJ/DEC_OBJ were added by the Astrocut utility representing the right ascension
and declination of the object in decimal degrees.  Another new keyword is ORIG_FLE
which represents the original input filename from which the cutout was extracted.
In each output file, the image extensions have been explicitly named for
for clarity.

.. code-block:: python 

   >>> hdu=fits.open("hst_cutout_skycell-p0081x14y15-ra84d9207-decs69d8516_wfc3_ir_f128n_coarse-ibp505mf.fits")
   >>> hdu.info()
   Filename: hst_cutout_skycell-p0081x14y15-ra84d9207-decs69d8516_wfc3_ir_f128n_coarse-ibp505mf.fits
   No.    Name      Ver    Type      Cards   Dimensions   Format
     0  PRIMARY       1 PrimaryHDU     775   ()
     1  SCI_CUTOUT_p0081x14y15_wfc3_ir_f128n    1 ImageHDU        94   (2500, 2500)   float32
     2  WHT_CUTOUT_p0081x14y15_wfc3_ir_f128n    1 ImageHDU        56   (2500, 2500)   float32


mvm_combine
^^^^^^^^^^^
The final MVM utility at this time is ``mvm_combine`` and is designed to combine filter-level
cutout images originating from multiple skycells where all the images were acquired with the same
detector and using the same filter.  The utility will also combine exposure-level cutout
images from multiple skycells where the images were acquired with the same
detector, using the same filter, and sharing the same ipppssoo.  Put more straightforwardly,
the cutout images must have originated from the same MVM drizzled image which spanned
the border between multiple skycells.  Cutout images in the
input list which do not adhere to these noted requirements will trigger a message of
explanation and be ignored for the combination process.

The ``mvm_combine`` utility is invoked by providing a list of cutout files, and the utility
will handle segregating the files into filter- and exposure-level sets and determining
whether or not the cutout file is eligible for the combination process.  Once all the
input images have been prepared, the mvm_combine will call the Astrocut function
``CutoutsCombiner`` to handle the actual combination task.  At this time, only the default
*mean* combiner is available for use where every output pixel is the mean of all input
pixels that have data at that point.

Since both the SCI and WHT extensions of the input files are combined, individual
output combined FITS files will contain two image extensions, a SCI followed by a WHT.
The utility writes to the specified output directory one combined file per set of
compatible images.  The output filenames are constructed from the RA, Dec, instrument, detector,
filter, and exposure as appropriate.
Each exposure-level filename will be of the form::

   hst_combined_skycell-ra<##>d<####>-dec<n|s><##>d<####>_instrument_detector_filter_ipppssoo.fits

Each filter-level output filename will be of the form::

   hst_combined_skycell-ra<##>d<####>-dec<n|s><##>d<####>_instrument_detector_filter.fits

The keyword, FILENAME, has been added to the PHDU) to self-document the
name of the file.
The Extension Header Data Units (EHDUs) contain custom keywords which document the
filenames and extension names of the originating files.  These custom keywords are
created by the ``CutoutsCombiner`` and are of the form Fnn_[K|V|C]mm representing the
keywords EXTNAMEs and ORIG_FLEs from the input cutout files. The nn represents the
header number, and mm represents a count of the custom keywords.
For example,

.. code-block:: python 

   Filename: hst_combined_skycells-ra84d9206-decs69d8516_wfc3_ir_f110w_iby03fg4.fits
   No.    Name      Ver    Type      Cards   Dimensions   Format
     0  PRIMARY       1 PrimaryHDU      11   ()
     1                1 ImageHDU       102   (2500, 2500)   float64
     2                1 ImageHDU        66   (2500, 2500)   float64

   where the first extention or combined SCI extension header contains
   O_EXT_NM= 'SCI     '           / Original extension name.
   ORIG_EXT=                    1 / Extension in original file.
   F01_K01 = 'EXTNAME '           / Keyword
   F01_V01 = 'SCI_CUTOUT_p0081x14y15_wfc3_ir_f110w' / Value
   F01_C01 = 'extension name'     / Comment
   F02_K01 = 'EXTNAME '           / Keyword
   F02_V01 = 'SCI_CUTOUT_p0081x14y14_wfc3_ir_f110w' / Value
   F02_C01 = 'extension name'     / Comment
   F01_K02 = 'ORIG_FLE'           / Keyword
   F01_V02 = 'hst_skycell-p0081x14y15_wfc3_ir_f110w_coarse-all-iby03fg4_drz.fits' /
   F01_C02 = '' / Comment
   F02_K02 = 'ORIG_FLE'           / Keyword
   F02_V02 = 'hst_skycell-p0081x14y14_wfc3_ir_f110w_coarse-all-iby03fg4_drz.fits' /
   F02_C02 = '' / Comment

and similarly for the second or combined WHT extension.

